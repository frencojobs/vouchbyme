type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username", operations: [read, update] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  )
  @key(fields: ["username"]) {
  # Cognito Props
  id: ID!
  username: String!
  email: String!

  # Profile Props
  firstName: String
  lastName: String
  avatar: String
  bio: String
  greeting: Greeting @connection(fields: ["username"])
  collections: [Collection!]
    @connection(keyName: "byUsername", fields: ["username"])

  # Social Links
  twitter: String
  instagram: String
  youtube: String
  linkedin: String
  website: String
  github: String
  hashnode: String
}

type Greeting
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  )
  @key(fields: ["username"]) {
  username: String!
  title: String!
  body: String!
  vouch: Int!
}

type Collection
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  )
  @key(name: "byUsername", fields: ["owner", "createdAt"]) {
  owner: String
  createdAt: AWSDateTime! @auto
  id: ID!
  title: String!
  layout: String
  posts: [Post!] @connection(keyName: "byCollection", fields: ["id"])
  vouch: Int!
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  )
  @key(name: "byCollection", fields: ["collectionId", "index"]) {
  id: ID!
  collectionId: ID!
  index: Int!
  type: String!
  title: String!
  cover: String
  body: String
  link: String
  vouch: Int!
}
